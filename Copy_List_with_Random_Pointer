// Code 3: Copy List with Random Pointer
/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
   private:
  void insertAtTail(Node* & head, Node*&tail, int d){
      Node* newnode=new Node(d);
      if(head==NULL){
          head=newnode;
          tail=newnode;
          return;
      }
      else{
          tail->next=newnode;
          tail=newnode;
      }  
  }
public:
    Node* copyRandomList(Node* head) {
        //step 1: Create a Clone List
        Node* clonehead = NULL;
        Node* clonetail = NULL;
        
        Node* temp = head;
        while(temp != NULL) {
            insertAtTail(clonehead, clonetail, temp->val);
            temp = temp -> next;
        }
        // step2: add clone node in between original list
        Node* originalnode=head;
        Node* clonenode=clonehead;
        
        while(originalnode!=NULL && clonenode!=NULL){
            Node* next=originalnode->next;
            originalnode->next=clonenode;
            originalnode=next;
            
             next=clonenode->next;
             clonenode->next=originalnode;
             clonenode=next;
            
        }
        
        //step 3: random pointer copy
        temp=head;
        while(temp!=NULL){
            if(temp->next!=NULL){
                if(temp->random!=NULL){
                    temp->next->random=temp->random->next;
                }
            }
            temp=temp->next->next;
        }
        
        //step 4: revert back changes of step 2
        originalnode=head;
        clonenode=clonehead;
        
        while(originalnode!=NULL && clonenode!=NULL){
            originalnode->next=clonenode->next;
            originalnode=originalnode->next;
            
            if(originalnode!=NULL){
                clonenode->next=originalnode->next;
            }
            clonenode=clonenode->next;
        }
        
        //step 5:
        return clonehead;
    }
};
